<?xml version="1.0" encoding="UTF-8"?>
<!--
    Cloud Foundry
    Copyright (c) [2009-2014] Pivotal Software, Inc. All Rights Reserved.

    This product is licensed to you under the Apache License, Version 2.0 (the "License").
    You may not use this product except in compliance with the License.

    This product includes a number of subcomponents with
    separate copyright notices and license terms. Your use of these
    subcomponents is subject to the terms and conditions of the
    subcomponent's license, as noted in the LICENSE file.

-->
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.springframework.org/schema/beans"
    xmlns:oauth="http://www.springframework.org/schema/security/oauth2" xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd">

    <http name="clientSecretSecurity" pattern="/oauth/clients/*/secret" create-session="stateless"
        authentication-manager-ref="emptyAuthenticationManager" entry-point-ref="oauthAuthenticationEntryPoint"
        access-decision-manager-ref="accessDecisionManager" xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/oauth/clients/*/secret" access="IS_AUTHENTICATED_FULLY,scope=clients.secret" />
        <custom-filter ref="clientResourceAuthenticationFilter" position="PRE_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
    </http>

    <http name="clientTxAdminSecurity" pattern="/oauth/clients/tx/**" create-session="stateless" entry-point-ref="oauthAuthenticationEntryPoint"
        use-expressions="true" authentication-manager-ref="emptyAuthenticationManager" xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**" access="#oauth2.hasScope('clients.admin')" method="DELETE" />
        <intercept-url pattern="/**" access="#oauth2.hasScope('clients.admin')" method="POST" />
        <intercept-url pattern="/**" access="#oauth2.hasScope('clients.admin')" method="PUT" />
        <custom-filter ref="clientResourceAuthenticationFilter" before="PRE_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <expression-handler ref="oauthWebExpressionHandler" />
    </http>

    <http name="clientAdminSecurity" pattern="/oauth/clients/**" create-session="stateless" entry-point-ref="oauthAuthenticationEntryPoint"
          use-expressions="true" authentication-manager-ref="emptyAuthenticationManager" xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/**" access="#oauth2.hasAnyScope('clients.write','clients.admin')" method="DELETE" />
        <intercept-url pattern="/**" access="#oauth2.hasAnyScope('clients.write','clients.admin')" method="POST" />
        <intercept-url pattern="/**" access="#oauth2.hasAnyScope('clients.write','clients.admin')" method="PUT" />
        <intercept-url pattern="/**" access="#oauth2.hasAnyScope('clients.read','clients.admin')" method="GET" />
        <custom-filter ref="clientResourceAuthenticationFilter" before="PRE_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <expression-handler ref="oauthWebExpressionHandler" />
    </http>

    <oauth:resource-server id="clientResourceAuthenticationFilter" token-services-ref="tokenServices"
        resource-id="clients" entry-point-ref="oauthAuthenticationEntryPoint" />

    <bean id="clientAdminEndpoints" class="org.cloudfoundry.identity.uaa.oauth.ClientAdminEndpoints">
        <property name="clientRegistrationService" ref="clientRegistrationService" />
        <property name="clientDetailsService" ref="clientDetailsService" />
        <property name="approvalStore" ref="approvalStore"/>
        <property name="authenticationManager" ref="clientAuthenticationManager"/>
        <property name="attributeNameMapper">
            <bean class="org.cloudfoundry.identity.uaa.rest.SimpleAttributeNameMapper">
                <constructor-arg name="paramsMap">
                    <map key-type="java.lang.String" value-type="java.lang.String">
                        <entry key="client_id" value="clientId" />
                        <entry key="resource_ids" value="resourceIds" />
                        <entry key="authorized_grant_types" value="authorizedGrantTypes" />
                        <entry key="redirect_uri" value="registeredRedirectUri" />
                        <entry key="access_token_validity" value="accessTokenValiditySeconds" />
                        <entry key="refresh_token_validity" value="refreshTokenValiditySeconds" />
                    </map>
                </constructor-arg>
            </bean>
        </property>
    </bean>

    <bean id="clientAdminEventPublisher" class="org.cloudfoundry.identity.uaa.oauth.event.ClientAdminEventPublisher">
        <constructor-arg ref="jdbcClientDetailsService" />
    </bean>

    <aop:config proxy-target-class="true">
        <aop:aspect ref="clientAdminEventPublisher">
            <aop:after-returning method="create"
                pointcut="execution(* *..ClientAdminEndpoints+.createClientDetails(..)) and bean(clientAdminEndpoints)" returning="client" />
            <aop:after-returning method="update"
                pointcut="execution(* *..ClientAdminEndpoints+.updateClientDetails(..)) and bean(clientAdminEndpoints)" returning="client" />
            <aop:around method="delete"
                pointcut="execution(* *..ClientAdminEndpoints+.removeClientDetails(String, ..)) and args(clientId,..) and bean(clientAdminEndpoints)" />
            <aop:after-returning method="secretChange"
                pointcut="execution(* *..ClientAdminEndpoints+.changeSecret(String, ..)) and args(clientId,..) and bean(clientAdminEndpoints)" />
            <aop:after-throwing method="secretFailure"
                pointcut="execution(* *..ClientAdminEndpoints+.changeSecret(String, ..)) and args(clientId,..) and bean(clientAdminEndpoints)"
                throwing="e" />
            <aop:after-returning method="createTx"
                pointcut="execution(* *..ClientAdminEndpoints+.createClientDetailsTx(..)) and bean(clientAdminEndpoints)" returning="clients" />
            <aop:after-returning method="updateTx"
                pointcut="execution(* *..ClientAdminEndpoints+.updateClientDetailsTx(..)) and bean(clientAdminEndpoints)" returning="clients" />
            <aop:after-returning method="deleteTx"
                pointcut="execution(* *..ClientAdminEndpoints+.removeClientDetailsTx(..)) and bean(clientAdminEndpoints)" returning="clients" />
            <aop:after-returning method="modifyTx"
                pointcut="execution(* *..ClientAdminEndpoints+.modifyClientDetailsTx(..)) and bean(clientAdminEndpoints)" returning="clients" />
            <aop:after-returning method="secretTx"
                pointcut="execution(* *..ClientAdminEndpoints+.changeSecretTx(..)) and bean(clientAdminEndpoints)" returning="clients" />
        </aop:aspect>
    </aop:config>

</beans>
